# This is Documentation/conf.py, the configuration file for Sphinx's
# builder.
#
# We use this single file to build documentation whether it's driven
# by CMake (when we build locally) or by ReadTheDocs.
#
# Important differences:
#
# CMake:
#    - Doxygen gets run externally before Sphinx is called.  We get
#      the location of the XML files from the environment variable
#      DOXYGEN_XML_OUTPUT_PATH.
#
# Read the Docs:
#    - We have to run Doxygen ourselves.
#
#    - The Python environment must have a copy of Tracktable installed
#      so that the Sphinx autodoc extension can successfully import the
#      modules.  The source tree itself isn't enough because we need
#      the compiled extensions.
#
#    - As a result, we actually document the version of Tracktable
#      installed in the environment, not the one in the checked-out
#      repository.
#
# All configuration values have a default; values that are commented out
# serve to show the default.
#
# We can tell which build we're running by looking for the environment
# variable READTHEDOCS.  If it's set (including set but empty), we're
# on RTD.

import subprocess
import sys
import os
import os.path
import pprint
import re

if 'READTHEDOCS' in os.environ:
    READTHEDOCS_BUILD = True
    CMAKE_BUILD = False
else:
    READTHEDOCS_BUILD = False
    CMAKE_BUILD = True

###
### Utility functions
###

def here() -> str:
    """Return the full path to this file.

    No arguments.

    Returns:
        str: Path to this file
    """
    return os.path.abspath(os.path.dirname(__file__))


def tracktable_root() -> str:
    """Return the path to the root of the Tracktable repository.

    No arguments.

    Returns:
        str: Path to repository root
    """

    # We assume that we are in $root/tracktable-docs/Documentation.
    relative_root = os.path.join(here(), "..", "..")
    return os.path.abspath(os.path.normpath(relative_root))


def tracktable_src() -> str:
    """Return the path to the Tracktable Python source tree.

    No arguments.

    Returns:
        str: Path to $root/src/Python
    """

    return os.path.join(tracktable_root(), "src", "Python")


def tracktable_version_full() -> str:
    """Return the full Tracktable version (e.g. 1.7.2) as a string

    This opens version.txt and searches for the line that begins with
    TRACKTABLE_VERSION.

    No arguments.

    Returns:
        Full version parsed from $root/version.txt
    """

    version_txt_location = os.path.join(tracktable_root(), "version.txt")
    with open(version_txt_location, "r") as infile:
        version_data = infile.read()
        match = re.search(r"^TRACKTABLE VERSION ([0-9\.]*)", version_data)
        if match is None:
            raise RuntimeError("Couldn't find TRACKTABLE VERSION in version.txt.")
        return match.group(0)


def major_minor_versions_only(full_version: str) -> str:
    """Given a version 1.2.3, return 1.2.

    Arguments:
        full_version (str): Version number with components separated by periods

    Returns:
        str: First two components of version
    """

    components = full_version.split('.')
    return f"{components[0]}.{components[1]}"


def print_environment():
    """Print debug information about the environment
    """

    print("*** Current directory: {}".format(os.getcwd()))
    print("*** Location of conf.py: {}".format(here()))

    print("*** Environment variables:")
    pprint.pprint(os.environ)

    print("Listing of tutorial notebook directory:")
    notebook_path = os.path.normpath(os.path.join(here(), "..", "tutorial_notebooks"))
    subprocess.run(
        ["/bin/ls", "-l",  notebook_path]
    )


### -----------------------------------------------------------------------
###
### Common configuration
###
### These options are the same for both builds.
###
### -----------------------------------------------------------------------

extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.intersphinx',
    'sphinx.ext.mathjax',
    'sphinx.ext.napoleon',
    'sphinx.ext.todo',
    'sphinx.ext.viewcode',
    'sphinx.ext.graphviz',
    # 'sphinxcontrib.video', # The videos generated by our example don't play in the browser for some reason
    'breathe',
    'nbsphinx',
    'nbsphinx_link'
]

# Include TODO items in generated documentation.
todo_include_todos = True

# The suffix(es) of source filenames.
source_suffix = ['.rst']

# The autodoc Sphinx extension doesn't need to care about our Python
# extension modules.  This list contains symbols that it should
# pretend to have imported already.
#
# TODO: Back these out and see if we still get documentation.

autodoc_mock_imports = [
    'cartopy',
    'matplotlib',
    'mpl_toolkits',
    'numpy',
    'shapefile',
    'shapely',
    'tracktable_data',
    'tracktable.core.core_types' # for BoostPythonArgumentError
]

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Tracktable'
copyright = ("Copyright (c) 2014-2023 National Technology and Engineering "
             "Solutions of Sandia, LLC. Under the terms of Contract "
             "DE-NA0003525 with National Technology and Engineering "
             "Solutions of Sandia, LLC, the U.S. Government retains certain "
             "rights in this software.")

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# TODO: Add the Doxygen build directory
exclude_patterns = ['_build',
                    '*/data/*',
                    '_static',
                    'README.md',
                    'Doxyfile'
                    ]


# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# ----- Options for nbsphinx (Jupyter notebook extension) -----

# Halt the build process if we encounter an exception.
nbsphinx_allow_errors = False
# Do not execute notebooks.  Options are 'always', 'never', 'auto' (default).
nbsphinx_execute = 'never'
# Wait forever for builds to complete.  A positive value specifies a timeout.
nbsphinx_timeout = -1
# Kernel arguments for executing notebooks.
nbsphinx_execute_arguments = [
    "--InlineBackend.figure_formats={'svg', 'pdf'}",
    "--InlineBackend.rc={'figure.dpi': 96}",
]
nbsphinx_input_prompt = 'In [%s]:' # Input prompt for code cells. %s is replaced by the execution count.
nbsphinx_output_prompt = 'Out[%s]:' # Output prompt for code cells. %s is replaced by the execution count.

# -- Options for Breathe (Doxygen <-> Sphinx bridge) ------------

# We will set this later in the build-specific sections

breathe_projects = None
breathe_default_project = "tracktable_cpp"

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.

html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static', '_static/css']
html_style = "tracktable.css"

# Output file base name for HTML help builder.
htmlhelp_basename = 'TracktableDoc'


# Intersphinx gives us links to the documentation for other toolkits.
intersphinx_mapping = {
    'python': ('https://docs.python.org/', None),
    'matplotlib': ('https://matplotlib.org/stable/', None),
    'numpy': ('https://docs.scipy.org/doc/numpy/', None)
}

authors = ", ".join([
    "Andy Wilson",
    "Danny Rintoul",
    "Chris Valicka",
    "Ben Newton",
    "Phil Baxley",
    "Kat Ward",
    "Rick Vinyard",
    "Michael Scoggin",
    "Michael Fadem",
    "Geoff Danielson"
])

# Last and not least, set up the short and full versions.
release = tracktable_version_full()
version = major_minor_versions_only(release)


### -----------------------------------------------------------------------
###
### End of common configuration
###
### -----------------------------------------------------------------------




### -----------------------------------------------------------------------
###
### CMake-driven build
###
### Doxygen has already been run for us.  We need to add the source
### tree to sys.path and then we're done.
###
### -----------------------------------------------------------------------

if CMAKE_BUILD:
    sys.path.insert(0, tracktable_src())

    if "DOXYGEN_XML_OUTPUT_PATH" not in os.environ:
        raise RuntimeError("DOXYGEN_XML_OUTPUT_PATH was not set by CMake!")

    breathe_projects = {
        'tracktable_cpp': os.environ['DOXYGEN_XML_OUTPUT_PATH']
    }

### -----------------------------------------------------------------------
###
### ReadTheDocs build
###
### We need to run Doxygen (including setting up the environment variables),
### Doxygen has already been run for us.  We need to add the source
### tree to sys.path and then we're done.
###
### -----------------------------------------------------------------------

if READTHEDOCS_BUILD:
    print("*** Detected Read the Docs build.  Printing environment.")
    print_environment()

    xml_output_path = os.path.join(os.getcwd(), "doxygen_xml")

    doxygen_environment = os.environ.copy()
    doxygen_environment["PROJECT_NUMBER"] = tracktable_version_full()
    doxygen_environment["DOXYGEN_GENERATE_HTML"] = "NO"
    doxygen_environment["DOXYGEN_GENERATE_XML"] = "YES"
    doxygen_environment["DOXYGEN_XML_OUTPUT_PATH"] = xml_output_path

    subprocess.call(
        ["doxygen Doxyfile"],
        shell=True,
        env=doxygen_environment
        )

    breathe_projects = {
        'tracktable_cpp': xml_output_path
    }

    # Due to Sphinx parsing restrictions the python wrapped modules
    # need to be imported before we start building the documentation
    import tracktable.lib

